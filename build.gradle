buildscript {
    ext {
        version = '0.2.2'
        description = 'Heroku add-ons utilities.'
        group = 'moe.pine'
        siteUrl = 'https://github.com/pine/heroku-addons'
        gitUrl = 'https://github.com/pine/heroku-addons.git'
        userOrg = 'pinemz'

        junitVersion = '5.4.2'
        powermockVersion = '2.0.2'
    }
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.11'
        classpath 'org.checkerframework:checkerframework-gradle-plugin:0.3.4'
    }
}


// ----- Project ------------------------------------------

apply plugin: 'java-library'
apply plugin: 'idea'

group rootProject.ext.group
version rootProject.ext.version
description rootProject.ext.description

repositories {
    jcenter()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.powermock:powermock-reflect:$powermockVersion"
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}


// ----- Build Time Tracker -------------------------------

apply plugin: 'build-time-tracker'

buildtimetracker {
    reporters {
        summary {
            ordered true
            barstyle 'ascii'
        }
    }
}


// ----- JaCoCo ---------------------------------------

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.3'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}


// ----- SpotBugs -------------------------------------

apply plugin: 'com.github.spotbugs'

spotbugs {
    toolVersion = '3.1.8'
    excludeFilter = file("${project.rootDir}/findbugs-exclude.xml")
    spotbugsTest.enabled = false
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


// ----- Checker Framework ----------------------------

apply plugin: 'org.checkerframework'
checkerFramework {
    excludeTests = true

    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
        checkers = [
                'org.checkerframework.checker.nullness.NullnessChecker',
                'org.checkerframework.checker.units.UnitsChecker'
        ]
    }
}


// ----- Bintray ------------------------------------------

apply from: "${rootProject.projectDir}/gradle/bintray.gradle"
